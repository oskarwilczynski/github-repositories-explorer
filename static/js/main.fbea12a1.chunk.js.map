{"version":3,"sources":["app/hooks.ts","features/repos/SingleRepo.tsx","styles/Buttons.styles.ts","styles/ShimmerLoading.styles.ts","api/client.js","features/repos/reposSlice.tsx","features/repos/Repos.tsx","features/users/SingleUser.tsx","features/users/usersSlice.tsx","features/users/Users.tsx","features/searchBar/SearchBar.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","RepoContainer","styled","div","TitleAndStars","RepoTitle","h6","RepoDescription","p","Repos","name","html_url","stargazers_count","description","onClick","window","open","icon","faStar","style","marginLeft","LongBlueButton","button","shimmer","keyframes","Shimmer","RepoPlaceholder","UserPlaceholder","client","endpoint","a","body","customConfig","headers","config","method","JSON","stringify","fetch","response","json","data","ok","Error","statusText","Promise","reject","message","get","post","initialState","fetchRepos","createAsyncThunk","arg","login","fetchAllRepos","reposSlice","createSlice","reducers","extraReducers","builder","addCase","pending","state","action","meta","repos","status","error","undefined","fulfilled","payload","rejected","selectStatusByLogin","keys","useState","loadMoreClicked","setLoadMoreClicked","selectReposByLogin","selectErrorByLogin","dispatch","data-testid","map","key","r","SingleRepo","id","length","textAlign","type","UserButton","SingleUser","isCollapsed","changeItem","faAngleDown","faAngleUp","display","aria-expanded","query","users","fetchUsers","items","usersSlice","setQuery","actions","selectQuery","selectUsers","selectStatus","selectError","UsersParagraph","Users","index","setIndex","useEffect","user","i","SearchBarInput","input","SearchBar","value","setValue","placeholder","onChange","e","target","AppContainer","App","store","configureStore","reducer","usersReducer","reposReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.fbea12a1.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = (): AppDispatch => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faStar } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { Repo } from './Repos.types';\r\n\r\nconst RepoContainer = styled.div`\r\n  background-color: #DFDFDF;\r\n  font-size: 2.5vh;\r\n  width: 95%;\r\n  height: 14vh;\r\n  float: right;\r\n  padding: 10px 7px 10px 7px;\r\n  box-sizing: border-box;\r\n  margin-bottom: 10px;\r\n  &:first-child {\r\n    margin-top: 5px;\r\n  }\r\n`;\r\n\r\nconst TitleAndStars = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst RepoTitle = styled.h6`\r\n  font-size: 2.5vh;\r\n  margin: 0;\r\n`;\r\n\r\nconst RepoDescription = styled.p`\r\n  margin-top: 0;\r\n  font-size: 2.2vh;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  display: -webkit-box;\r\n  -webkit-line-clamp: 3;\r\n  -webkit-box-orient: vertical;\r\n`;\r\n\r\nconst Repos = ({\r\n  name,\r\n  html_url,\r\n  stargazers_count,\r\n  description,\r\n}: Omit<Repo, 'id'>): JSX.Element => (\r\n  <RepoContainer onClick={() => window.open(html_url)}>\r\n    <TitleAndStars>\r\n      <RepoTitle>{name}</RepoTitle>\r\n      <span>\r\n        {stargazers_count}\r\n        <FontAwesomeIcon\r\n          icon={faStar}\r\n          style={{ marginLeft: '5px' }}\r\n        />\r\n      </span>\r\n    </TitleAndStars>\r\n    <RepoDescription>{description}</RepoDescription>\r\n  </RepoContainer>\r\n);\r\n\r\nexport default Repos;\r\n","import styled from 'styled-components';\r\n\r\nconst LongBlueButton = styled.button`\r\n  width: 100%;\r\n  font-size: 2.5vh;\r\n  padding: 1.7vh;\r\n  color: white;\r\n  background-color: #2D9CDB;\r\n  border-style: solid;\r\n  border-color: #A3D6F0;\r\n  border-radius: 3px;\r\n  border-width: thin;\r\n`;\r\n\r\nexport default LongBlueButton;\r\n","import styled, { keyframes } from 'styled-components';\r\n\r\nconst shimmer = keyframes`\r\n  0% {\r\n    background-position: -1000px 0;\r\n  }\r\n  100% {\r\n    background-position: 1000px 0;\r\n  }\r\n`;\r\n\r\nconst Shimmer = styled.div`\r\n  animation : ${shimmer} 2s infinite linear;\r\n  background: linear-gradient(to right, #eff1f3 4%, #e2e2e2 25%, #eff1f3 36%);\r\n  background-size: 1000px 100%;\r\n`;\r\n\r\nexport const RepoPlaceholder = styled(Shimmer)`\r\n  width: 95%;\r\n  float: right;\r\n  height: 14vh;\r\n  padding: 10px 7px 10px 7px;\r\n  box-sizing: border-box;\r\n  margin-bottom: 10px;\r\n  &:first-child {\r\n    margin-top: 5px;\r\n  }\r\n`;\r\n\r\nexport const UserPlaceholder = styled(Shimmer)`\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n  height: 5vh;\r\n  margin: 5px 0 5px 0px;\r\n  padding: 1vh;\r\n`;\r\n","// A tiny wrapper around fetch(), borrowed from\r\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\r\n/* eslint-disable */\r\nasync function client(endpoint, { body, ...customConfig } = {}) {\r\n  const headers = { 'Content-Type': 'application/json' };\r\n\r\n  const config = {\r\n    method: body ? 'POST' : 'GET',\r\n    ...customConfig,\r\n    headers: {\r\n      ...headers,\r\n      ...customConfig.headers,\r\n    },\r\n  };\r\n\r\n  if (body) {\r\n    config.body = JSON.stringify(body);\r\n  }\r\n\r\n  let data;\r\n  try {\r\n    const response = await window.fetch(endpoint, config);\r\n    data = await response.json();\r\n    if (response.ok) {\r\n      return data;\r\n    }\r\n    throw new Error(response.statusText);\r\n  } catch (err) {\r\n    return Promise.reject(err.message ? err.message : data);\r\n  }\r\n}\r\n\r\nclient.get = function (endpoint, customConfig = {}) {\r\n  return client(endpoint, { ...customConfig, method: 'GET' });\r\n};\r\n\r\nclient.post = function (endpoint, body, customConfig = {}) {\r\n  return client(endpoint, { ...customConfig, body });\r\n};\r\n\r\nexport default client;\r\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport client from '../../api/client';\r\n\r\nimport type { RootState } from '../../app/store';\r\nimport type { Repo } from './Repos.types';\r\n\r\ninterface ReposSlice {\r\n  repos: Repo[],\r\n  status: 'loading' | 'succeeded' | 'failed',\r\n  error: string | undefined,\r\n}\r\n\r\nexport const initialState: { [key: string]: ReposSlice } = {};\r\n\r\nexport const fetchRepos = createAsyncThunk('repos/fetchRepos',\r\n  async (arg: { login: string, fetchAllRepos?: boolean }) => {\r\n    const { login, fetchAllRepos } = arg;\r\n    const response = await client\r\n      .get(`https://api.github.com/users/${login}/repos?per_page=${fetchAllRepos ? '9999' : '3'}`);\r\n    return response;\r\n  });\r\n\r\nconst reposSlice = createSlice({\r\n  name: 'repos',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      // Clear state.repos when new fetchUsers action fulfilled\r\n      .addCase('users/fetchUsers/fulfilled', () => (\r\n        initialState\r\n      ))\r\n      .addCase(fetchRepos.pending, (state, action) => (\r\n        {\r\n          ...state,\r\n          [action.meta.arg.login]: {\r\n            repos: [],\r\n            status: 'loading',\r\n            error: undefined,\r\n          },\r\n        }\r\n      ))\r\n      .addCase(fetchRepos.fulfilled, (state, action) => {\r\n        state[action.meta.arg.login].status = 'succeeded';\r\n        state[action.meta.arg.login].repos = action.payload;\r\n      })\r\n      .addCase(fetchRepos.rejected, (state, action) => {\r\n        state[action.meta.arg.login].status = 'failed';\r\n        state[action.meta.arg.login].error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport const selectReposByLogin = (state: RootState, login: string): Repo[] | [] => (\r\n  state.repos[login]?.repos || []\r\n);\r\nexport const selectStatusByLogin = (state: RootState, login: string): string => (\r\n  state.repos[login]?.status || 'idle'\r\n);\r\nexport const selectErrorByLogin = (state: RootState, login: string): string | undefined => (\r\n  state.repos[login]?.error || undefined\r\n);\r\n\r\nexport default reposSlice.reducer;\r\n","import React, { useState } from 'react';\r\nimport type { Repo } from './Repos.types';\r\nimport SingleRepo from './SingleRepo';\r\nimport LongBlueButton from '../../styles/Buttons.styles';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { RepoPlaceholder } from '../../styles/ShimmerLoading.styles';\r\nimport {\r\n  fetchRepos,\r\n  selectReposByLogin,\r\n  selectStatusByLogin,\r\n  selectErrorByLogin,\r\n} from './reposSlice';\r\n\r\nconst keys = [1, 2, 3];\r\n\r\ninterface Props {\r\n  login: string,\r\n}\r\n\r\nconst Repos = ({ login }: Props): JSX.Element => {\r\n  const [loadMoreClicked, setLoadMoreClicked] = useState(false);\r\n  const repos = useAppSelector((state) => selectReposByLogin(state, login));\r\n  const status = useAppSelector((state) => selectStatusByLogin(state, login));\r\n  const error = useAppSelector((state) => selectErrorByLogin(state, login));\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleClick = () => {\r\n    dispatch(fetchRepos({ login, fetchAllRepos: true }));\r\n    setLoadMoreClicked(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {status === 'loading' && (\r\n        <div data-testid=\"repos-loading\">\r\n          {keys.map((key) => <RepoPlaceholder key={`repo-loading-${key}`} />)}\r\n        </div>\r\n      )}\r\n      {status === 'succeeded' && repos.map((r: Repo) => (\r\n        <SingleRepo\r\n          name={r.name}\r\n          html_url={r.html_url}\r\n          stargazers_count={r.stargazers_count}\r\n          description={r.description}\r\n          key={r.id}\r\n        />\r\n      ))}\r\n      {status === 'succeeded' && !repos.length && (\r\n        <p style={{ textAlign: 'center' }}>No repos found for {login}</p>\r\n      )}\r\n      {status === 'succeeded' && repos.length === 3 && !loadMoreClicked && (\r\n        <LongBlueButton\r\n          type=\"button\"\r\n          onClick={handleClick}\r\n        >\r\n          Click to load all {login}&apos;s repos\r\n        </LongBlueButton>\r\n      )}\r\n      {status === 'failed' && (\r\n        <>\r\n          <h5>Error!</h5>\r\n          <p>{error}</p>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Repos;\r\n","import styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleDown, faAngleUp } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport Repos from '../repos/Repos';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { fetchRepos, selectStatusByLogin } from '../repos/reposSlice';\r\n\r\nconst UserButton = styled.button`\r\n  width: 100%;\r\n  margin: 5px 0 5px 0px;\r\n  font-size: 2.5vh;\r\n  border: none;\r\n  padding: 1vh;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n`;\r\n\r\ninterface Props {\r\n  login: string,\r\n  isCollapsed: boolean,\r\n  changeItem: () => void,\r\n}\r\n\r\nconst SingleUser = ({ login, isCollapsed, changeItem }: Props): JSX.Element => {\r\n  const status = useAppSelector((state) => selectStatusByLogin(state, login));\r\n  const dispatch = useAppDispatch();\r\n\r\n  const onClick = () => {\r\n    isCollapsed && status === 'idle' && dispatch(fetchRepos({ login }));\r\n    changeItem();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <UserButton type=\"button\" onClick={onClick}>\r\n        {login}\r\n        <FontAwesomeIcon icon={isCollapsed ? faAngleDown : faAngleUp} />\r\n      </UserButton>\r\n      {!isCollapsed && (\r\n        <div\r\n          style={{ display: isCollapsed ? 'none' : 'block' }}\r\n          aria-expanded={!isCollapsed}\r\n          data-testid=\"repos-container\"\r\n        >\r\n          <Repos login={login} />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleUser;\r\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport client from '../../api/client';\r\n\r\nimport type { RootState } from '../../app/store';\r\n\r\ninterface Users {\r\n  query: string,\r\n  users: Array<{ login: string, id: number }>,\r\n  status: 'idle' | 'loading' | 'succeeded' | 'failed',\r\n  error: string | undefined,\r\n}\r\n\r\nexport const initialState: Users = {\r\n  query: '',\r\n  users: [],\r\n  status: 'idle',\r\n  error: undefined,\r\n};\r\n\r\nexport const fetchUsers = createAsyncThunk('users/fetchUsers', async (login: string) => {\r\n  const response = await client.get(`https://api.github.com/search/users?per_page=5&q=${login}`);\r\n  return response.items;\r\n});\r\n\r\nconst usersSlice = createSlice({\r\n  name: 'users',\r\n  initialState,\r\n  reducers: {\r\n    setQuery(state, action) {\r\n      state.query = action.payload;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchUsers.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(fetchUsers.fulfilled, (state, action) => {\r\n        state.status = 'succeeded';\r\n        state.users = action.payload;\r\n      })\r\n      .addCase(fetchUsers.rejected, (state, action) => {\r\n        state.status = 'failed';\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { setQuery } = usersSlice.actions;\r\n\r\nexport const selectQuery = (state: RootState): Users['query'] => state.users.query;\r\nexport const selectUsers = (state: RootState): Users['users'] => state.users.users;\r\nexport const selectStatus = (state: RootState): Users['status'] => state.users.status;\r\nexport const selectError = (state: RootState): Users['error'] => state.users.error;\r\n\r\nexport default usersSlice.reducer;\r\n","import { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useAppSelector } from '../../app/hooks';\r\n\r\nimport SingleUser from './SingleUser';\r\nimport { UserPlaceholder } from '../../styles/ShimmerLoading.styles';\r\nimport {\r\n  selectQuery,\r\n  selectUsers,\r\n  selectStatus,\r\n  selectError,\r\n} from './usersSlice';\r\n\r\nconst keys = [1, 2, 3, 4, 5];\r\n\r\nconst UsersParagraph = styled.p`\r\n  font-size: 2.5vh;\r\n  color: #646464;\r\n  margin: 10px 0 10px 0px;\r\n`;\r\n\r\nconst Users = (): JSX.Element => {\r\n  const [index, setIndex] = useState(-1);\r\n  const query = useAppSelector(selectQuery);\r\n  const users = useAppSelector(selectUsers);\r\n  const status = useAppSelector(selectStatus);\r\n  const error = useAppSelector(selectError);\r\n\r\n  useEffect(() => {\r\n    setIndex(-1);\r\n  }, [query, users]);\r\n\r\n  const changeItem = (i: number) => {\r\n    if (i !== index) {\r\n      setIndex(i);\r\n    } else {\r\n      setIndex(-1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {status === 'loading' && (\r\n        <>\r\n          <UsersParagraph>\r\n            Loading users for &quot;{query}&quot;\r\n          </UsersParagraph>\r\n          <div data-testid=\"users-loading\">\r\n            {keys.map((key) => <UserPlaceholder key={`user-loading-${key}`} />)}\r\n          </div>\r\n        </>\r\n      )}\r\n      {status === 'succeeded' && (\r\n        <>\r\n          <UsersParagraph>{users.length\r\n            ? `Showing users for \"${query}\"`\r\n            : `No users found for \"${query}\"`}\r\n          </UsersParagraph>\r\n          {users.map((user, i) => (\r\n            <div key={user.id}>\r\n              <SingleUser\r\n                isCollapsed={index !== i}\r\n                login={user.login}\r\n                changeItem={() => changeItem(i)}\r\n              />\r\n            </div>\r\n          ))}\r\n        </>\r\n      )}\r\n      {status === 'failed' && error && (\r\n        <>\r\n          <h3>Error!</h3>\r\n          <p>{error}</p>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n","import { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport LongBlueButton from '../../styles/Buttons.styles';\r\nimport { useAppDispatch } from '../../app/hooks';\r\nimport { setQuery, fetchUsers } from '../users/usersSlice';\r\n\r\nconst SearchBarInput = styled.input`\r\n  box-sizing: border-box;\r\n  font-size: 2.5vh;\r\n  width: 100%;\r\n  background-color: #F2F2F2;\r\n  padding: 1.3vh;\r\n  border-color: #E9E9E9;\r\n  border-style: solid;\r\n  margin-bottom: 1.5vh;\r\n`;\r\n\r\nconst SearchBar = (): JSX.Element => {\r\n  const [value, setValue] = useState('');\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleClick = () => {\r\n    if (value) {\r\n      dispatch(fetchUsers(value));\r\n      dispatch(setQuery(value));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <SearchBarInput\r\n        type=\"text\"\r\n        value={value}\r\n        placeholder=\"Enter username\"\r\n        onChange={(e) => setValue(e.target.value)}\r\n      />\r\n      <LongBlueButton type=\"button\" onClick={handleClick}>Search</LongBlueButton>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import './App.css';\nimport styled from 'styled-components';\n\nimport Users from './features/users/Users';\nimport SearchBar from './features/searchBar/SearchBar';\n\nconst AppContainer = styled.div`\n  margin: 2vh;\n`;\n\nconst App = (): JSX.Element => (\n  <AppContainer>\n    <SearchBar />\n    <Users />\n  </AppContainer>\n);\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport usersReducer from '../features/users/usersSlice';\nimport reposReducer from '../features/repos/reposSlice';\n\nconst store = configureStore({\n  reducer: {\n    users: usersReducer,\n    repos: reposReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\nReturnType,\nRootState,\nunknown,\nAction<string>\n>;\n\nexport default store;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './app/store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}